# -*- coding: utf-8 -*-

"""
字符编码
字符串也是一种数据类型，字符串比较特殊的是还有一个编码问题

计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理
最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），
所以，一个字节能表示的最大的整数就是255（二进制11111111=十进制255）
如果要表示更大的整数，就必须用更多的字节
比如两个字节可以表示的最大整数是65535，4个字节可以表示的最大整数是4294967295
最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为ASCII编码
Unicode把所有语言都统一到一套编码里
Unicode标准最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）
现代操作系统和大多数编程语言都直接支持Unicode
UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，
常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节
UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，
所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作

现在计算机系统通用的字符编码工作方式：
在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码
用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，
编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件
浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器
"""

"""
Python的字符串
"""
# 在最新的Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言
print('包含中文的str')

# 对于单个字符的编码，Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符
ord('A')
ord('中')
chr(66)
chr(25991)

# 如果知道字符的整数编码，还可以用十六进制这么写str
print('\u4e2d\u6587')

# 由于Python的字符串类型是str，在内存中以Unicode表示，一个字符对应若干个字节
# 如果要在网络上传输，或者保存到磁盘上，就需要把str变为以字节为单位的bytes
# Python对bytes类型的数据用带b前缀的单引号或双引号表示
x = b'ABC'
print(x)

# 要注意区分'ABC'和b'ABC'，前者是str，后者虽然内容显示得和前者一样，但bytes的每个字符都只占用一个字节
# 以Unicode表示的str通过encode()方法可以编码为指定的bytes
'ABC'.encode('ascii')
'中文'.encode('utf-8')
'中文'.encode('ascii')  # 含有中文的str无法用ASCII编码，因为中文编码的范围超过了ASCII编码的范围，Python会报错

# 反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是bytes
# 要把bytes变为str，就需要用decode()方法
b'ABC'.decode('ascii')
b'\xe4\xb8\xad\xe6\x96\x87'.decode('utf-8')
b'\xe4\xb8\xad\xff'.decode('utf-8')  # 如果bytes中包含无法解码的字节，decode()方法会报错
# 如果bytes中只有一小部分无效的字节，可以传入errors='ignore'忽略错误的字节
b'\xe4\xb8\xad\xff'.decode('utf-8', errors='ignore')

# 要计算str包含多少个字符，可以用len()函数
len('ABC')
len('中文')
# 如果换成bytes，len()函数就计算字节数
len(b'ABC')
len(b'\xe4\xb8\xad\xe6\x96\x87')
len('中文'.encode('utf-8'))
# 可见，1个中文字符经过UTF-8编码后通常会占用3个字节，而1个英文字符只占用1个字节

"""
在操作字符串时，我们经常遇到str和bytes的互相转换
为了避免乱码问题，应当始终坚持使用UTF-8编码对str和bytes进行转换
"""

# 由于Python源代码也是一个文本文件，
# 所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码
# 当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行

#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# 第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释
# 第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码

# 申明了UTF-8编码并不意味着你的.py文件就是UTF-8编码的
# 必须并且要确保文本编辑器正在使用UTF-8 without BOM编码


"""
格式化
在Python中，采用的格式化方式和C语言是一致的，用%实现
在字符串内部，%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，后面就跟几个变量或者值，顺序要对应好
如果只有一个%?，括号可以省略
%d	整数
%f	浮点数
%s	字符串
%x	十六进制整数
"""
# 格式化整数和浮点数还可以指定是否补0和整数与小数的位数
print('%2d-%02d' % (3, 1))
print('%.2f' % 3.1415926)

# %s永远起作用，它会把任何数据类型转换为字符串
print('Age: %s. Gender: %s' % (25, True))

# 字符串里面的%是一个普通字符的时候就需要转义，用%%来表示一个%
print('growth rate: %d %%' % 7)

# 另一种格式化字符串的方法是使用字符串的format()方法
print('Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', 17.125))

# 练习
# 小明的成绩从去年的72分提升到了今年的85分，
# 请计算小明成绩提升的百分点，并用字符串格式化显示出'xx.x%'，只保留小数点后1位

s1 = 72
s2 = 85

r = (s2-s1)/s1*100
print('小明的成绩比去年提高了 %.1f%%' % r)

"""
小结
Python 3的字符串使用Unicode，直接支持多语言
当str和bytes互相转换时，需要指定编码
最常用的编码是UTF-8，如果没有特殊业务要求，请牢记仅使用UTF-8编码
"""
